# Objetivo geral:
- Sistema bancário com: sacar, depositar e visualizar extrato.

# Operação de depósito:
- Depositar valores positivos (não negativo).
- Apenas um usuário.
- Todos os depósitos devem ser armazenados em uma variável e exibidos na operação de extrato.

# Operação de saque:
- Limite de 3 saques diários.
- Limite por saque: R$500,00.
- Se user não tiver saldo em conta, sistema deve exibir mensagem informando que não é possível sacar por falta de saldo.
- Todos os saques devem ser armazenados em uma variável e exibidos na operação de extrato.

# Operação de extrato:
- Deve listar todos os depósitos e saques.
- No fim da listagem, exibir o saldo atual da conta.
- Deve ser exibido no formato "R$00.00".

-------------------------------
# ATUALIZAÇÃO:

Precisamos deixar o código mais modularizado, para isso vamos criar funções para as operações existentes: sacar, depositar e visualizar extrato.

Além disso, para a versão 2 do nosso sistema precisamos criar duas novas funções: criar usuário (cliente do banco) e criar conta corrente (vincular com usuário).

Devemos criar funções para todas as operações do sistema. Para exercitar tudo o que aprendemos neste módulo, cada função vai ter uma regra na passagem de argumentos. O retorno e a forma como serão chamadas, pode ser definida por você da forma que achar melhor.

#OK: 3. A função de saque deve receber os argumentos apenas por nome (keyword only). Sugestão de argumentos: saldo, valor, extrato, limite, numero_saques, limite_saques. Sugestão de retorno: saldo e extrato.

#OK: A função depósito deve receber os argumentos apenas por posição (positional only). Sugestão de argumentos: saldo, valor, extrato. Sugestão de retorno: saldo e extrato.

#OK: A função extrato deve receber os argumentos por posição e nome (positional only and keyword only). Argumentos posicionais: saldo, argumentos nomeados: extrato.

#OK: Precisams criar duas novas funções: criar usuário e criar conta corrente. Fique a vontade para adicionar mais funções, exemplo: listar contas.

#OK: 1. O programa deve armazenar os usuários em uma lista, um usuário é composto por: nome, data de nascimento, cpf e endereço. O endereço é uma string com o formato: logradouro, nro - bairro - cidade/sigla estado. Deve ser armazenado somente os números do CPF. Não podemos cadastrar 2 usuários com o mesmo CPF.

#OK: 2. O programa deve armazenar contas em uma lista, uma conta é composta por: agência, número da conta e usuário. O número da conta é sequencial, iniciando em 1. O número da agência é fixo: "0001". O usuário pode ter mais de uma conta, mas uma conta pertence a somente um usuário.

Dica: para vincular um usuário a uma conta, você pode filtrar a lista de usuários buscando o número do CPF informado para cada usuário da lista.


# Edson Copque | https://linktr.ee/edsoncopque